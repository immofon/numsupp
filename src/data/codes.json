[{"type":"code","line":1,"id":"","code":"#include \u003cstdio.h\u003e","prompt":""},{"type":"code","line":2,"id":"","code":"#include \u003cassert.h\u003e","prompt":""},{"type":"code","line":3,"id":"","code":"#include \u003cmath.h\u003e","prompt":""},{"type":"code","line":4,"id":"","code":"#include \u003cstdlib.h\u003e","prompt":""},{"type":"code","line":5,"id":"","code":"","prompt":""},{"type":"code","line":6,"id":"","code":"static int checkpoint_num = 0;","prompt":""},{"type":"code","line":7,"id":"","code":"void checkpoint(int i) {","prompt":""},{"type":"code","line":8,"id":"","code":"  checkpoint_num = i;","prompt":""},{"type":"code","line":9,"id":"","code":"}","prompt":""},{"type":"code","line":10,"id":"","code":"","prompt":""},{"type":"code","line":11,"id":"","code":"void out_int(int x) {","prompt":""},{"type":"code","line":12,"id":"","code":"  printf(\"s|%d|%d\\n\",checkpoint_num,x);","prompt":""},{"type":"code","line":13,"id":"","code":"  fflush(stdout);","prompt":""},{"type":"code","line":14,"id":"","code":"}","prompt":""},{"type":"code","line":15,"id":"","code":"void out_double(double x) {","prompt":""},{"type":"code","line":16,"id":"","code":"  printf(\"f|%d|%.16lf\\n\",checkpoint_num,x);","prompt":""},{"type":"code","line":17,"id":"","code":"  fflush(stdout);","prompt":""},{"type":"code","line":18,"id":"","code":"}","prompt":""},{"type":"code","line":19,"id":"","code":"void out_string(const char*s) {","prompt":""},{"type":"code","line":20,"id":"","code":"  printf(\"s|%d|%s\\n\",checkpoint_num,s);","prompt":""},{"type":"code","line":21,"id":"","code":"  fflush(stdout);","prompt":""},{"type":"code","line":22,"id":"","code":"}","prompt":""},{"type":"code","line":23,"id":"","code":"void out_double_array(int n,double* X) {","prompt":""},{"type":"code","line":24,"id":"","code":"  out_string(\"double_array\");","prompt":""},{"type":"code","line":25,"id":"","code":"  out_int(n);","prompt":""},{"type":"code","line":26,"id":"","code":"  for(int i = 0;i \u003c n; i++) {","prompt":""},{"type":"code","line":27,"id":"","code":"    out_double(X[i]);","prompt":""},{"type":"code","line":28,"id":"","code":"  }","prompt":""},{"type":"code","line":29,"id":"","code":"}","prompt":""},{"type":"code","line":30,"id":"","code":"","prompt":""},{"type":"code","line":31,"id":"","code":"// 所有以\"new_\"开头的函数都在内部调用malloc申请了堆内存,并将对应内存","prompt":""},{"type":"code","line":32,"id":"","code":"// 的首地址作为返回值返回，调用者需要在使用后用free释放内存空间.","prompt":""},{"type":"code","line":33,"id":"","code":"","prompt":""},{"type":"code","line":34,"id":"","code":"// 在区间[a,b]上生成一个有n个结点的均匀分划","prompt":""},{"type":"code","line":35,"id":"","code":"// n: 结点数量","prompt":""},{"type":"code","line":36,"id":"","code":"// a,b: 区间[a,b]的两个端点","prompt":""},{"type":"code","line":37,"id":"","code":"double *new_uniform_partition(double a, double b, int n) {","prompt":""},{"type":"code","line":38,"id":"","code":"  assert(n \u003e= 2);","prompt":""},{"type":"code","line":39,"id":"","code":"  assert(a \u003c b);","prompt":""},{"type":"code","line":40,"id":"","code":"","prompt":""},{"type":"code","line":41,"id":"","code":"  double h = (b - a) / (n - 1);","prompt":""},{"type":"code","line":42,"id":"","code":"  double *partition = (double *)malloc(sizeof(double) * n);","prompt":""},{"type":"code","line":43,"id":"","code":"  int i;","prompt":""},{"type":"code","line":44,"id":"","code":"","prompt":""},{"type":"code","line":45,"id":"","code":"  // 对partition赋值","prompt":""},{"type":"expectpoint","line":46,"id":"1","code":"","prompt":""},{"type":"code","line":53,"id":"","code":"","prompt":""},{"type":"code","line":54,"id":"","code":"  return partition;","prompt":""},{"type":"code","line":55,"id":"","code":"}","prompt":""},{"type":"code","line":56,"id":"","code":"","prompt":""},{"type":"code","line":57,"id":"","code":"// 一元Lagrange插值基函数","prompt":""},{"type":"code","line":58,"id":"","code":"// 返回由n个结点X生成的第i个Lagrange插值基函数在x处的值","prompt":""},{"type":"code","line":59,"id":"","code":"double lagrange_basis(int n, double *X, int i, double x) {","prompt":""},{"type":"code","line":60,"id":"","code":"  assert(n \u003e 0);","prompt":""},{"type":"code","line":61,"id":"","code":"  assert(0 \u003c= i \u0026\u0026 i \u003c n);","prompt":""},{"type":"code","line":62,"id":"","code":"  assert(X != NULL);","prompt":""},{"type":"code","line":63,"id":"","code":"","prompt":""},{"type":"expectpoint","line":64,"id":"2","code":"","prompt":""},{"type":"code","line":76,"id":"","code":"}","prompt":""},{"type":"code","line":77,"id":"","code":"","prompt":""},{"type":"code","line":78,"id":"","code":"// 一元Lagrange插值","prompt":""},{"type":"code","line":79,"id":"","code":"// 返回由n个结点X和对应Y生成的Lagrange插值多项式在x处的值","prompt":""},{"type":"code","line":80,"id":"","code":"double lagrange_intp(int n, double *X, double *Y, double x) {","prompt":""},{"type":"code","line":81,"id":"","code":"  assert(n \u003e 0);","prompt":""},{"type":"code","line":82,"id":"","code":"  assert(X != NULL);","prompt":""},{"type":"code","line":83,"id":"","code":"  assert(Y != NULL);","prompt":""},{"type":"expectpoint","line":84,"id":"3","code":"","prompt":""},{"type":"code","line":92,"id":"","code":"}","prompt":""},{"type":"code","line":93,"id":"","code":"","prompt":""},{"type":"code","line":94,"id":"","code":"// 生成函数f的像","prompt":""},{"type":"code","line":95,"id":"","code":"double *new_function_image(int n, double *X, double (*f)(double x)) {","prompt":""},{"type":"code","line":96,"id":"","code":"  assert(n \u003e 0);","prompt":""},{"type":"code","line":97,"id":"","code":"  assert(X != NULL);","prompt":""},{"type":"code","line":98,"id":"","code":"  assert(f != NULL);","prompt":""},{"type":"code","line":99,"id":"","code":"","prompt":""},{"type":"expectpoint","line":100,"id":"4","code":"","prompt":""},{"type":"code","line":109,"id":"","code":"}","prompt":""},{"type":"code","line":110,"id":"","code":"","prompt":""},{"type":"code","line":111,"id":"","code":"int main() {","prompt":""},{"type":"checkpoint","line":112,"id":"1","code":"","prompt":"new_uniform_partition"},{"type":"code","line":120,"id":"","code":"","prompt":""},{"type":"checkpoint","line":121,"id":"2","code":"","prompt":"lagrange_basis"},{"type":"code","line":131,"id":"","code":"","prompt":""},{"type":"checkpoint","line":132,"id":"3","code":"","prompt":"new_function_image"},{"type":"code","line":139,"id":"","code":"","prompt":""},{"type":"code","line":140,"id":"","code":"","prompt":""},{"type":"checkpoint","line":141,"id":"4","code":"","prompt":"lagrange_basis"},{"type":"code","line":151,"id":"","code":"","prompt":""},{"type":"code","line":152,"id":"","code":"  return 0;","prompt":""},{"type":"code","line":153,"id":"","code":"}","prompt":""},{"type":"code","line":154,"id":"","code":"","prompt":""}]